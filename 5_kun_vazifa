class Mytuple:
    def __init__(self,*args):
        self.args =args

    def __getitem__(self,key):
        assert isinstance(key,int), "key ERROR"
        if key>len(self.args)-1: 
            raise IndexError("Index out of range")
        return self.args[key]
    def __str__(self):
        return f"{self.args}"

class MyList:
    
    def __init__(self,*args):
        self.args =args

    def __getitem__(self,key):
        assert isinstance(key,int), "key ERROR"
        if key>len(self.args)-1: 
            raise IndexError("Index out of range")
        return self.args[key]
    def __str__(self):
        return f"{self.args}"
    
    def append(self,item):
        self.args += (item,)

    def remove(self,item):
        if item in self.args:
            self.args = tuple(x for x in self.args if x!= item)
        else:
            raise ValueError("Item not found in list")

class Myset:
    
    def __init__(self,*args):
        self.args =args

    def __getitem__(self,key):
        assert isinstance(key,int), "key ERROR"
        if key>len(self.args)-1: 
            raise IndexError("Index out of range")
        return self.args[key]
    def __str__(self):
        return f"{self.args}"
    
    def append(self,item):
        self.args += (item,)

    def remove(self,item):
        if item in self.args:
            self.args = tuple(x for x in self.args if x!= item)
        else:
            raise ValueError("Item not found in list")
        
    
